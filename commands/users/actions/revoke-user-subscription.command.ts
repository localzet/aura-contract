import { z } from 'zod';

import { getEndpointDetails } from '../../../constants';
import { ExtendedUsersSchema } from '../../../models';
import { REST_API, USERS_ROUTES } from '../../../api';

export namespace RevokeUserSubscriptionCommand {
    export const url = REST_API.USERS.ACTIONS.REVOKE_SUBSCRIPTION;
    export const TSQ_url = url(':uuid');

    export const endpointDetails = getEndpointDetails(
        USERS_ROUTES.ACTIONS.REVOKE_SUBSCRIPTION(':uuid'),
        'post',
        'Revoke user subscription',
    );

    export const RequestSchema = z.object({
        uuid: z.string().uuid(),
    });

    export type Request = z.infer<typeof RequestSchema>;

    export const RequestBodySchema = z.preprocess(
        (val) => val || {},
        z.object({
            shortUuid: z.optional(
                z
                    .string()
                    .min(6, { message: 'Short UUID must be at least 6 characters' })
                    .max(48, { message: 'Short UUID must be at most 48 characters' })
                    .describe(
                        'Optional. If not provided, a new short UUID will be generated by Aura. Please note that it is strongly recommended to allow Aura to generate the short UUID.',
                    ),
            ),
        }),
    );

    export type RequestBody = z.infer<typeof RequestBodySchema>;

    export const ResponseSchema = z.object({
        response: ExtendedUsersSchema,
    });

    export type Response = z.infer<typeof ResponseSchema>;
}
